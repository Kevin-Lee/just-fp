(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{150:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var o=t(2),r=t(9),i=(t(0),t(158)),a={id:"monoid",title:"Monoid"},s={id:"typeclass/monoid",isDocsHomePage:!1,title:"Monoid",description:"Monoid",source:"@site/../generated-docs/target/mdoc/typeclass/monoid.md",permalink:"/docs/typeclass/monoid",sidebar:"someSidebar",previous:{title:"Semi-Group",permalink:"/docs/typeclass/semi-group"},next:{title:"Functor",permalink:"/docs/typeclass/functor"}},c=[{value:"Left Identity",id:"left-identity",children:[]},{value:"Right Identity",id:"right-identity",children:[]},{value:"Examples",id:"examples",children:[]}],p={rightToc:c};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"monoid"},"Monoid"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Monoid")," is a ",Object(i.b)("inlineCode",{parentName:"p"},"SemiGroup")," with identity element which guarantees that\n",Object(i.b)("inlineCode",{parentName:"p"},"Monoid")," complies with left identity law and right identity law."),Object(i.b)("h2",{id:"left-identity"},"Left Identity"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),"// Left identity\nMonoid[A].append(Monoid[A].zero, A) // is just A\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),'import just.fp._\nimport just.fp.syntax._\n\n// So\nMonoid[List[Int]].append(Monoid[List[Int]].zero, List(1, 2, 3))\n// res0: List[Int] = List(1, 2, 3)\n// The same as\nMonoid[List[Int]].append(List.empty, List(1, 2, 3))\n// res1: List[Int] = List(1, 2, 3)\n\nMonoid[Int].append(Monoid[Int].zero, 999)\n// res2: Int = 999\n// The same as\nMonoid[Int].append(0, 999)\n// res3: Int = 999\n\nMonoid[String].zero |+| "abc"\n// res4: String = "abc"\n// The same as\n"" |+| "abc"\n// res5: String = "abc"\n\nMonoid[Option[Int]].zero.mappend(123.some)\n// res6: Option[Int] = Some(123)\n// The same as\nnone[Int].mappend(123.some)\n// res7: Option[Int] = Some(123)\n')),Object(i.b)("h2",{id:"right-identity"},"Right Identity"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),"// Right identity\nMonoid[A].append(A, Monoid[A].zero) // is just A\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),'import just.fp._\nimport just.fp.syntax._\n\n// So\nMonoid[List[Int]].append(List(1, 2, 3), Monoid[List[Int]].zero)\n// res8: List[Int] = List(1, 2, 3)\n// The same as\nMonoid[List[Int]].append(List(1, 2, 3), List.empty)\n// res9: List[Int] = List(1, 2, 3)\n\nMonoid[Int].append(999, Monoid[Int].zero)\n// res10: Int = 999\n// The same as\nMonoid[Int].append(999, 0)\n// res11: Int = 999\n\n"abc" |+| Monoid[String].zero\n// res12: String = "abc"\n// The same as\n"abc" |+| ""\n// res13: String = "abc"\n\n123.some.mappend(Monoid[Option[Int]].zero)\n// res14: Option[Int] = Some(123)\n// The same as\n123.some.mappend(none[Int])\n// res15: Option[Int] = Some(123)\n')),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)("p",null,"Example use of ",Object(i.b)("inlineCode",{parentName:"p"},"Monoid")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),'def fold[A : Monoid](as: List[A]): A =\n  as.foldLeft(Monoid[A].zero)(_ |+| _)\n\nfold(List(1, 2, 3, 4, 5))\n// res16: Int = 15\n\nfold(List("abc", "def", "ghi"))\n// res17: String = "abcdefghi"\n\nfold(List(1.some, 2.some, none, 4.some, 5.some, none))\n// res18: Option[Int] = Some(12)\n')))}d.isMDXComponent=!0},158:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return b}));var o=t(0),r=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),d=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=d(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=d(t),u=o,b=l["".concat(a,".").concat(u)]||l[u]||m[u]||i;return t?r.a.createElement(b,s(s({ref:n},p),{},{components:t})):r.a.createElement(b,s({ref:n},p))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=t[p];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);