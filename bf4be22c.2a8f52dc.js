(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{147:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return l}));var o=t(2),r=t(9),a=(t(0),t(158)),i={id:"functor",title:"Functor"},c={id:"typeclass/functor",isDocsHomePage:!1,title:"Functor",description:"Functor",source:"@site/../generated-docs/target/mdoc/typeclass/functor.md",permalink:"/docs/typeclass/functor",sidebar:"someSidebar",previous:{title:"Monoid",permalink:"/docs/typeclass/monoid"},next:{title:"Applicative",permalink:"/docs/typeclass/applicative"}},p=[{value:"Functor",id:"functor",children:[]},{value:"Identity Law",id:"identity-law",children:[]},{value:"Composition Law",id:"composition-law",children:[]},{value:"Examples",id:"examples",children:[]}],s={rightToc:p};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"functor"},"Functor"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"functor")," is a typeclass for the types that can be mapped over."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Functor")," complies with identity law and composition law."),Object(a.b)("h2",{id:"identity-law"},"Identity Law"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"map(identity) === identity")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),"import just.fp._\nimport just.fp.syntax._\n\nFunctor[Option].map(1.some)(identity(_)) === identity(1.some)\n// res1: Boolean = true\nFunctor[Option].map(1.some)(identity(_))\n// res2: Option[Int] = Some(value = 1)\nidentity(1.some)\n// res3: Option[Int] = Some(value = 1)\n\nFunctor[Option].map(none[Int])(identity(_)) === identity(none[Int])\n// res4: Boolean = true\nFunctor[Option].map(none[Int])(identity(_))\n// res5: Option[Int] = None\nidentity(none[Int])\n// res6: Option[Int] = None\n")),Object(a.b)("h2",{id:"composition-law"},"Composition Law"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"map(f compose g) === map(f) compose map(g)")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),"import just.fp._\nimport just.fp.syntax._\n\nval f = (a: Int) => a + 100\n// f: Int => Int = <function1>\nval g = (b: Int) => b * 2\n// g: Int => Int = <function1>\n\nFunctor[Option].map(1.some)(f compose g)\n// res8: Option[Int] = Some(value = 102)\n\nFunctor[Option].map(Functor[Option].map(1.some)(g))(f)\n// res9: Option[Int] = Some(value = 102)\n\nFunctor[Option].map(1.some)(f compose g) ===\n  Functor[Option].map(Functor[Option].map(1.some)(g))(f)\n// res10: Boolean = true\n\n\nFunctor[Option].map(none[Int])(f compose g)\n// res11: Option[Int] = None\n\nFunctor[Option].map(Functor[Option].map(none[Int])(g))(f)\n// res12: Option[Int] = None\n\nFunctor[Option].map(none[Int])(f compose g) ===\n  Functor[Option].map(Functor[Option].map(none[Int])(g))(f)\n// res13: Boolean = true\n")),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("p",null,"If there is a typeclass instance of ",Object(a.b)("inlineCode",{parentName:"p"},"Functor")," for a type ",Object(a.b)("inlineCode",{parentName:"p"},"A"),",\n",Object(a.b)("inlineCode",{parentName:"p"},"map")," method can be used."),Object(a.b)("p",null,"e.g.)"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),"import just.fp._\n\nfinal case class SomeType[A](a: A)\n\nobject SomeType {\n  implicit val functorA: Functor[SomeType] = new Functor[SomeType] {\n    override def map[A, B](fa: SomeType[A])(f: A => B): SomeType[B] =\n      SomeType(f(fa.a)) \n  } \n}\n\ndef times2(someType: SomeType[Int]): SomeType[Int] = \n    implicitly[Functor[SomeType]].map(someType)(_ * 2)\n\ntimes2(SomeType(111))\n// res15: SomeType[Int] = SomeType(a = 222)\n")),Object(a.b)("p",null,"There are existing ",Object(a.b)("inlineCode",{parentName:"p"},"Functor")," instances for Scala's ",Object(a.b)("inlineCode",{parentName:"p"},"Option"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Either"),", ",Object(a.b)("inlineCode",{parentName:"p"},"List"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Vector")," and ",Object(a.b)("inlineCode",{parentName:"p"},"Future"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-scala"}),'import just.fp._\nimport just.fp.syntax._  \n// just.fp.syntax._ is only for .some, none, .right, .left\n\ndef foo[A, B, F[_] : Functor](fa: F[A])(f: A => B): F[B] =\n  Functor[F].map(fa)(f)  \n  // or implicitly[Functor[F]].map(fa)(f)\n\nfoo(1.some)(_ * 2)\n// res17: Option[Int] = Some(value = 2)\nfoo(none[Int])(_ * 2)\n// res18: Option[Int] = None\n\nfoo(1.right[String])(_ * 2)\n// res19: Either[String, Int] = Right(value = 2)\nfoo("error".left[Int])(_ * 2)\n// res20: Either[String, Int] = Left(value = "error")\n\nfoo(List(1, 2, 3, 4, 5))(_ * 2)\n// res21: List[Int] = List(2, 4, 6, 8, 10)\nfoo(List.empty[Int])(_ * 2)\n// res22: List[Int] = List()\n\nfoo(Vector(1, 2, 3, 4, 5))(_ * 2)\n// res23: Vector[Int] = Vector(2, 4, 6, 8, 10)\nfoo(Vector.empty[Int])(_ * 2)\n// res24: Vector[Int] = Vector()\n\nimport scala.concurrent.Future\nimplicit val ec = scala.concurrent.ExecutionContext.global\n// ec: concurrent.ExecutionContextExecutor = scala.concurrent.impl.ExecutionContextImpl$$anon$3@3a2c2e12[Running, parallelism = 2, size = 2, active = 0, running = 0, steals = 1, tasks = 0, submissions = 0]\n\nfoo(Future(1))(_ * 2)\n// res25: Future[Int] = Future(Success(2))\n')))}l.isMDXComponent=!0},158:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),l=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},f=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(t),f=o,b=u["".concat(i,".").concat(f)]||u[f]||m[f]||a;return t?r.a.createElement(b,c(c({ref:n},s),{},{components:t})):r.a.createElement(b,c({ref:n},s))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);